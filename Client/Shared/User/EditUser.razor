@inject IUserService UserService
@inject IJSRuntime Jsrun
<h3>EditUser</h3>

<EditForm Model="User" OnValidSubmit="Submited">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>First Name</label>
        <InputText @bind-Value="User.Name" class="form-control"></InputText>
    </div>

    <div class="form-group">
        <label>Last Name</label>
        <InputText @bind-Value="User.LastName" class="form-control"></InputText>
    </div>

    <div>

        <label>Email</label>
        <InputText @bind-Value="User.Email" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label>Role</label><br />
        <InputRadioGroup @bind-Value="roleId" class="form-control">
            @foreach (var item in UserService.Roles)
            {
                <InputRadio Value="@item.Id" /> <span style="padding-left:5px;">@item.Caption</span><br />

            }
        </InputRadioGroup>
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText @bind-Value="User.Password" class="form-control"></InputText>
    </div>


    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>
@code {

    [Parameter]
    public BlazorTest.Shared.Entities.User User { get; set; } = new BlazorTest.Shared.Entities.User();
    int roleId = 1;
    protected override async Task OnParametersSetAsync()
    {

        await UserService.GetRoles();
        roleId = User.Role.Id;
    }

    public async void Submited()
    {
        var roles = UserService.Roles;
        User.Role = roles.FirstOrDefault(x => x.Id == roleId);
        Console.WriteLine("submit ok");
        Console.WriteLine(User.Name);

        if (User.Id == 0)
        {
            await UserService.CreateUser(User);

        }
        else
        {
            await UserService.UpdateUser(User);
        }

    }
}
