@page "/user"
@inject IUserService  UserService
@inject NavigationManager Navigation
@implements IDisposable

<h3>User</h3>
@if (UserService.Users.Count == 0)
{
    <span>Loading Data...</span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Family</th>
                <th>Email</th>
                <th>Role</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in UserService.Users)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.LastName</td>
                    <td>@item.Email</td>
                    <td>@item.Role.Caption</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(()=>ShowUser(item.Id))">Show</button>
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="(()=>EditUser(item.Id))">Edit</button>
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="(()=>DeleteUser(item.Id))">Delete</button>
                    </td>
                </tr>

            }
        </tbody>
    </table>
    <BlazorTest.Client.Shared.User.EditUser User="User">

    </BlazorTest.Client.Shared.User.EditUser>
}

@code {
    public BlazorTest.Shared.Entities.User User = new BlazorTest.Shared.Entities.User();
    protected override async Task OnInitializedAsync()
    {

        await UserService.GetUsers();
        UserService.OnChange += StateHasChanged;

    }
    void ShowUser(int id)
    {

        Navigation.NavigateTo($"user/{id}");
    }

    void EditUser(int id)
    {

        User = UserService.Users.Find(x => x.Id == id);
    }

    void DeleteUser(int id)
    {

        UserService.DeleteUser(id);
    }
    public void Dispose()
    {
        UserService.OnChange -= StateHasChanged;
    }
}
